# Copyright © Michal Čihař <michal@weblate.org>
#
# SPDX-License-Identifier: GPL-3.0-or-later
# Generated by Django 5.2.1 on 2025-06-13 18:13

from django.conf import settings
from django.contrib.auth.hashers import make_password
from django.db import migrations

from weblate.trans.actions import ACTIONS_CONTENT


def migrate_changes(apps, schema_editor) -> None:
    PendingUnitChange = apps.get_model("trans", "PendingUnitChange")
    Unit = apps.get_model("trans", "Unit")

    User = apps.get_model(*settings.AUTH_USER_MODEL.split("."))  # noqa: N806
    Group = apps.get_model("auth", "Group")

    try:
        anonymous_user = User.objects.get(username=settings.ANONYMOUS_USER_NAME)
    except User.DoesNotExist:
        anonymous_user, _ = User.objects.get_or_create(
            username=settings.ANONYMOUS_USER_NAME,
            defaults={
                "full_name": "Anonymous",
                "email": "noreply@weblate.org",
                "is_active": False,
                "password": make_password(None),
            },
        )
        anonymous_user.groups.set(
            Group.objects.filter(name__in=("Guests", "Viewers")), clear=True
        )

    pending_units = Unit.objects.filter(pending=True)

    pending_changes = []
    for unit in pending_units:
        try:
            author = (
                unit.change_set.filter(action__in=ACTIONS_CONTENT)
                .select_related("author")
                .order_by("-timestamp")[0]
                .author
            )
        except IndexError:
            author = anonymous_user

        pending_changes.append(
            PendingUnitChange(
                unit=unit,
                author=author,
                target=unit.target,
                explanation=unit.explanation,
                state=unit.state,
            )
        )
    PendingUnitChange.objects.bulk_create(pending_changes)

    pending_units.update(pending=False)


def reverse_migrate_changes(apps, schema_editor) -> None:
    PendingUnitChange = apps.get_model("trans", "PendingUnitChange")
    Unit = apps.get_model("trans", "Unit")
    pending_changes = PendingUnitChange.objects.select_related("unit").all()
    unit_pks = pending_changes.values_list("unit__pk", flat=True)
    Unit.objects.filter(pk__in=unit_pks).update(pending=True)
    pending_changes.delete()


class Migration(migrations.Migration):
    dependencies = [
        ("weblate_auth", "0006_group_enforced_2fa"),
        ("trans", "0039_pendingunitchange"),
    ]

    operations = [
        migrations.RunPython(migrate_changes, reverse_migrate_changes),
    ]
