# Copyright © Michal Čihař <michal@weblate.org>
#
# SPDX-License-Identifier: GPL-3.0-or-later

# Generated by Django 5.2.3 on 2025-07-07 06:44

from collections import defaultdict
from typing import Any

from django.db import migrations, models

ADDON_CONFG_TO_FILE_FORMAT_PARAMS = {
    "weblate.json.customize": {
        "sort_keys": "json_sort_keys",
        "use_compact_separators": "json_use_compact_separators",
        "indent": "json_indent",
        "style": "json_indent_style",
    },
    "weblate.gettext.msgmerge": {
        "previous": "po_keep_previous",
        "no_location": "po_no_location",
        "fuzzy": "po_fuzzy_matching",
    },
    "weblate.gettext.customize": {
        "width": "po_line_wrap",
    },
    "weblate.xml.customize": {"closing_tags": "xml_closing_tags"},
    "weblate.yaml.customize": {
        "indent": "yaml_indent",
        "width": "yaml_line_wrap",
        "line_break": "yaml_line_break",
    },
}


def convert_addon_config_to_file_format_params(addon) -> dict[str, Any]:
    """Convert addon configuration to file format parameters."""
    params = {}
    for key, param_name in ADDON_CONFG_TO_FILE_FORMAT_PARAMS[addon.name].items():
        if key in addon.configuration:
            params[param_name] = addon.configuration[key]
    return params


def migrate_addons_config(apps, schema_editor):
    Addon = apps.get_model("addons", "Addon")
    Component = apps.get_model("trans", "Component")
    to_update = []

    addons = Addon.objects.filter(
        name__in=ADDON_CONFG_TO_FILE_FORMAT_PARAMS.keys()
    ).select_related("component", "project")

    site_wide_params: list[dict] = []
    project_wide_params: dict[int, list[dict]] = defaultdict(list)
    component_wide_params: dict[int, list[dict]] = defaultdict(list)

    for addon in addons:
        file_format_params = convert_addon_config_to_file_format_params(addon)
        site_wide = not addon.component and not addon.project
        project_wide = bool(addon.project)
        component_wide = bool(addon.component)
        if file_format_params:
            if site_wide:
                site_wide_params.append(file_format_params)
            elif project_wide:
                project_wide_params[addon.project_id].append(file_format_params)
            elif component_wide:
                component_wide_params[addon.component_id].append(file_format_params)

    for component in Component.objects.all():
        file_format_params = {}
        if site_wide_params:
            file_format_params.update(
                {k: v for d in site_wide_params for k, v in d.items()}
            )
        if component.project_id in project_wide_params:
            file_format_params.update(
                {
                    k: v
                    for d in project_wide_params[component.project_id]
                    for k, v in d.items()
                }
            )
        if component.id in component_wide_params:
            file_format_params.update(
                {
                    k: v
                    for d in component_wide_params[component.id]
                    for k, v in d.items()
                }
            )

        if file_format_params:
            component.file_format_params = file_format_params
            to_update.append(component)

    if to_update:
        Component.objects.bulk_update(to_update, ["file_format_params"])


class Migration(migrations.Migration):
    dependencies = [
        ("trans", "0041_remove_unit_trans_unit_pending_remove_unit_pending"),
    ]

    operations = [
        migrations.AddField(
            model_name="component",
            name="file_format_params",
            field=models.JSONField(
                blank=True, default=dict, verbose_name="File format parameters"
            ),
        ),
        migrations.RunPython(migrate_addons_config, migrations.RunPython.noop),
    ]
