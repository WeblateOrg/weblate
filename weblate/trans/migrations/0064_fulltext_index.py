# Generated by Django 3.0.4 on 2020-03-10 14:47

from django.db import migrations


def create_index(apps, schema_editor):
    vendor = schema_editor.connection.vendor
    if vendor == "postgresql":
        # Create GIN index on searched fields
        schema_editor.execute(
            "CREATE INDEX unit_source_fulltext ON trans_unit "
            "USING GIN (to_tsvector('english', source))"
        )
        schema_editor.execute(
            "CREATE INDEX unit_target_fulltext ON trans_unit "
            "USING GIN (to_tsvector('english', target))"
        )
        schema_editor.execute(
            "CREATE INDEX unit_context_fulltext ON trans_unit "
            "USING GIN (to_tsvector('english', context))"
        )
        schema_editor.execute(
            "CREATE INDEX unit_note_fulltext ON trans_unit "
            "USING GIN (to_tsvector('english', note))"
        )
        schema_editor.execute(
            "CREATE INDEX unit_location_fulltext ON trans_unit "
            "USING GIN (to_tsvector('english', location))"
        )
        schema_editor.execute(
            "CREATE INDEX suggestion_target_fulltext ON trans_suggestion "
            "USING GIN (to_tsvector('english', target))"
        )
        schema_editor.execute(
            "CREATE INDEX comment_comment_fulltext ON trans_comment "
            "USING GIN (to_tsvector('english', comment))"
        )
        schema_editor.execute(
            "CREATE INDEX dictionary_source_fulltext ON trans_dictionary "
            "USING GIN (to_tsvector('english', source))"
        )
    elif vendor == "mysql":
        schema_editor.execute(
            "CREATE FULLTEXT INDEX unit_source_fulltext ON trans_unit(source)"
        )
        schema_editor.execute(
            "CREATE FULLTEXT INDEX unit_target_fulltext ON trans_unit(target)"
        )
        schema_editor.execute(
            "CREATE FULLTEXT INDEX unit_context_fulltext ON trans_unit(context)"
        )
        schema_editor.execute(
            "CREATE FULLTEXT INDEX unit_note_fulltext ON trans_unit(note)"
        )
        schema_editor.execute(
            "CREATE FULLTEXT INDEX unit_location_fulltext ON trans_unit(location)"
        )
        schema_editor.execute(
            "CREATE FULLTEXT INDEX comment_comment_fulltext ON trans_comment(comment)"
        )
        schema_editor.execute(
            "CREATE FULLTEXT INDEX dictionary_source_fulltext ON trans_dictionary(source)"
        )
    else:
        raise Exception("Unsupported database: {}".format(vendor))


def drop_index(apps, schema_editor):
    vendor = schema_editor.connection.vendor
    if vendor == "postgresql":
        schema_editor.execute("DROP INDEX unit_source_fulltext")
        schema_editor.execute("DROP INDEX unit_target_fulltext")
        schema_editor.execute("DROP INDEX unit_context_fulltext")
        schema_editor.execute("DROP INDEX unit_note_fulltext")
        schema_editor.execute("DROP INDEX unit_location_fulltext")
        schema_editor.execute("DROP INDEX suggestion_target_fulltext")
        schema_editor.execute("DROP INDEX comment_comment_fulltext")
        schema_editor.execute("DROP INDEX dictionary_source_fulltext")
    elif vendor == "mysql":
        schema_editor.execute("ALTER TABLE trans_unit DROP INDEX unit_source_fulltext")
        schema_editor.execute("ALTER TABLE trans_unit DROP INDEX unit_target_fulltext")
        schema_editor.execute("ALTER TABLE trans_unit DROP INDEX unit_context_fulltext")
        schema_editor.execute("ALTER TABLE trans_unit DROP INDEX unit_note_fulltext")
        schema_editor.execute(
            "ALTER TABLE trans_unit DROP INDEX unit_location_fulltext"
        )
        schema_editor.execute(
            "ALTER TABLE trans_comment DROP INDEX comment_comment_fulltext"
        )
        schema_editor.execute(
            "ALTER TABLE trans_dictionary DROP INDEX dictionary_source_fulltext"
        )
    else:
        raise Exception("Unsupported database: {}".format(vendor))


class Migration(migrations.Migration):

    dependencies = [("trans", "0063_auto_20200305_2202")]

    # This can't be atomic on MySQL
    operations = [
        migrations.RunPython(create_index, drop_index, elidable=False, atomic=False)
    ]
