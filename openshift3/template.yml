kind: Template
apiVersion: v1
labels:
  app: weblate
  part-of: weblate-on-premise
  template: weblate-on-premise
metadata:
  name: weblate
  annotations:
    openshift.io/display-name: Weblate (Persistent / PostgreSQL)
    openshift.io/documentation-url: "https://github.com/WeblateOrg/weblate"
    description: >-
      Creates a Weblate installation with separate PostgreSQL database instance.
      Requires that two persistent volumes be available. If a ReadWriteMany
      persistent volume type is available and used, Weblate can be scaled to
      multiple replicas and the deployment strategy switched to Rolling to
      permit rolling deployments on restarts.
    tags: "quickstart,python,weblate,localization,translation"
    iconClass: icon-python
parameters:
  - name: APPLICATION_NAME
    description: The name of the Weblate instance.
    value: weblate
    from: "[a-zA-Z0-9]"
    required: true
  - name: WEBLATE_VERSION
    description: >-
      Weblate docker image version (see:
      https://hub.docker.com/r/weblate/weblate/tags)
    value: latest
    required: true
  - name: WEBLATE_VOLUME_SIZE
    description: Size of the persistent volume for Weblate.
    value: 10Gi
    required: true
  - name: WEBLATE_VOLUME_TYPE
    description: Type of the persistent volume for Weblate.
    value: ReadWriteOnce
    required: true
  - name: WEBLATE_DEPLOYMENT_STRATEGY
    description: Type of the deployment strategy for Weblate.
    value: Recreate
    required: true
  - name: WEBLATE_CPU_LIMIT
    description: Amount of cpu cores available to Weblate.
    value: "4"
    required: true
  - name: WEBLATE_MEMORY_LIMIT
    description: Amount of memory available to Weblate.
    value: 8Gi
    required: true
  - name: WEBLATE_ADMIN_PASSWORD
    description: Password of the initial admin user.
    from: "[a-zA-Z0-9]{12}"
    generate: expression
  - name: WEBLATE_ADMIN_EMAIL
    description: Email address of the initial admin user.
    value: noreply@example.com
    required: true
  - name: WEBLATE_SERVER_EMAIL
    description: Email address for outgoing emails.
    value: noreply@example.com
    required: true
  - name: WEBLATE_SITE_DOMAIN
    displayName: Weblate Domain
    description: >-
      Domain of the application. The hostname can't be changed after the route
      is created.
    value: weblate.app-openshift.example.com
    required: true
  - name: CACHE_VOLUME_SIZE
    description: Size of the persistent volume for Redis Cache.
    value: 10Gi
    required: true
  - name: DATABASE_VOLUME_SIZE
    description: Size of the persistent volume for the database.
    value: 10Gi
    required: true
  - name: DATABASE_MEMORY_LIMIT
    description: Amount of memory available to the database.
    value: 8Gi
    required: true
  - name: DATABASE_USERNAME
    description: The name of the database user.
    value: weblate
    required: true
  - name: DATABASE_PASSWORD
    description: The password for the database user.
    from: "[a-zA-Z0-9]{12}"
    generate: expression
    required: true
  - name: POSTGRESQL_ADMIN_PASSWORD
    description: The password of postgres admin account
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    required: true
  - name: POSTGRESQL_IMAGE
    description: Link to the PostgreSQL image.
    value: "docker-registry.default.svc:5000/openshift/postgresql:9.6"
    required: true
  - name: REDIS_IMAGE
    description: Link to the Redis Cache image.
    value: "docker-registry.default.svc:5000/openshift/redis:3.2"
    required: true
  - name: REDIS_PASSWORD
    description: Password for the Redis connection user.
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    required: true
objects:
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-web"
      labels:
        component: web
    spec:
      strategy:
        type: "${WEBLATE_DEPLOYMENT_STRATEGY}"
      triggers:
        - type: ConfigChange
      replicas: 1
      selector:
        org.weblate.service: "${APPLICATION_NAME}-web"
      template:
        metadata:
          labels:
            component: web
            org.weblate.service: "${APPLICATION_NAME}-web"
        spec:
          initContainers:
            - name: init-redis
              image: "busybox:1.28.4"
              env:
                - name: REDIS_HOST
                  value: "${APPLICATION_NAME}-cache"
              command:
                - sh
                - "-c"
                - >-
                  until nslookup $(REDIS_HOST); do echo waiting for redis; sleep
                  2; done;
            - name: init-postgresql
              image: "busybox:1.28.4"
              env:
                - name: PGHOST
                  value: "${APPLICATION_NAME}-postgresql"
              command:
                - sh
                - "-c"
                - >-
                  until nslookup $(PGHOST); do echo waiting for postgres; sleep
                  2; done;
            - name: init-postgresql-superuser
              image: "${POSTGRESQL_IMAGE}"
              env:
                - name: PGHOST
                  value: "${APPLICATION_NAME}-postgresql"
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: POSTGRESQL_ADMIN_PASSWORD
                      name: "${APPLICATION_NAME}-secret"
                - name: PGUSER
                  valueFrom:
                    secretKeyRef:
                      key: POSTGRESQL_ADMIN_USER
                      name: "${APPLICATION_NAME}-secret"
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      key: POSTGRES_USER
                      name: "${APPLICATION_NAME}-secret"
              command:
                - sh
                - "-i"
                - "-c"
                - >-
                  until psql -c 'SELECT 1;'; do echo waiting for postgres; sleep
                  2; done; psql -c 'ALTER USER $(POSTGRES_USER) WITH SUPERUSER;'
          volumes:
            - name: data
              persistentVolumeClaim:
                claimName: "${APPLICATION_NAME}-weblate-data"
          containers:
            - name: weblate-web
              image: "weblate/weblate:${WEBLATE_VERSION}"
              imagePullPolicy: Always
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources:
                limits:
                  cpu: "${WEBLATE_CPU_LIMIT}"
                  memory: "${WEBLATE_MEMORY_LIMIT}"
                requests:
                  cpu: 100m
                  memory: 2Gi
              env:
                - name: POSTGRES_DATABASE
                  value: weblate
                - name: POSTGRES_HOST
                  value: "${APPLICATION_NAME}-postgresql"
                - name: POSTGRES_PORT
                  value: "5432"
                - name: REDIS_HOST
                  value: "${APPLICATION_NAME}-cache"
                - name: REDIS_PORT
                  value: "6379"
              envFrom:
                - secretRef:
                    name: weblate-secret
                - configMapRef:
                    name: weblate-config
              volumeMounts:
                - name: data
                  mountPath: /app/data
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-postgresql"
      labels:
        component: postgresql
        org.weblate.service: "${APPLICATION_NAME}-postgresql"
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
      replicas: 1
      selector:
        org.weblate.service: "${APPLICATION_NAME}-postgresql"
      template:
        metadata:
          labels:
            org.weblate.service: "${APPLICATION_NAME}-postgresql"
        spec:
          volumes:
            - name: data
              persistentVolumeClaim:
                claimName: "${APPLICATION_NAME}-postgresql-data"
          containers:
            - name: postgresql
              image: "${POSTGRESQL_IMAGE}"
              ports:
                - containerPort: 5432
                  protocol: TCP
              resources:
                limits:
                  memory: "${DATABASE_MEMORY_LIMIT}"
              readinessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 5
                exec:
                  command:
                    - sh
                    - "-i"
                    - "-c"
                    - >-
                      psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d
                      $POSTGRESQL_DATABASE -c 'SELECT 1'
              livenessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 30
                tcpSocket:
                  port: 5432
              env:
                - name: POSTGRESQL_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: POSTGRESQL_ADMIN_PASSWORD
                      name: "${APPLICATION_NAME}-secret"
                - name: POSTGRESQL_DATABASE
                  value: weblate
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      key: POSTGRES_USER
                      name: "${APPLICATION_NAME}-secret"
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: POSTGRES_PASSWORD
                      name: "${APPLICATION_NAME}-secret"
              volumeMounts:
                - name: data
                  mountPath: /var/lib/pgsql/data
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-cache"
      labels:
        component: redis
        org.weblate.service: "${APPLICATION_NAME}-cache"
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
      replicas: 1
      selector:
        org.weblate.service: "${APPLICATION_NAME}-cache"
      template:
        metadata:
          labels:
            org.weblate.service: "${APPLICATION_NAME}-cache"
        spec:
          volumes:
            - name: data
              persistentVolumeClaim:
                claimName: "${APPLICATION_NAME}-redis-data"
          containers:
            - name: redis
              image: "${REDIS_IMAGE}"
              imagePullPolicy: IfNotPresent
              ports:
                - containerPort: 6379
                  protocol: TCP
              livenessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 30
                tcpSocket:
                  port: 6379
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - "-i"
                    - "-c"
                    - >-
                      test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)"
                      == "PONG"
                failureThreshold: 3
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              volumeMounts:
                - name: data
                  mountPath: /var/lib/redis/data
              capabilities: {}
              env:
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: REDIS_PASSWORD
                      name: "${APPLICATION_NAME}-secret"
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-config"
    data:
      WEBLATE_DEBUG: "0"
      WEBLATE_SERVER_EMAIL: "${WEBLATE_SERVER_EMAIL}"
      WEBLATE_DEFAULT_FROM_EMAIL: "${WEBLATE_SERVER_EMAIL}"
      WEBLATE_SITE_DOMAIN: "${WEBLATE_SITE_DOMAIN}"
  - kind: Secret
    apiVersion: v1
    metadata:
      annotations:
        template.openshift.io/expose-password: "{.data['redis-password']}"
      name: "${APPLICATION_NAME}-secret"
    stringData:
      POSTGRESQL_ADMIN_PASSWORD: "${POSTGRESQL_ADMIN_PASSWORD}"
      POSTGRESQL_ADMIN_USER: postgres
      POSTGRES_PASSWORD: "${DATABASE_PASSWORD}"
      POSTGRES_USER: "${DATABASE_USERNAME}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      WEBLATE_ADMIN_PASSWORD: "${WEBLATE_ADMIN_PASSWORD}"
      WEBLATE_ADMIN_NAME: "${WEBLATE_ADMIN_EMAIL}"
      WEBLATE_ADMIN_EMAIL: "${WEBLATE_ADMIN_EMAIL}"
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      ports:
        - name: 8080-tcp
          protocol: TCP
          port: 8080
          targetPort: 8080
      selector:
        org.weblate.service: "${APPLICATION_NAME}-web"
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-postgresql"
      labels:
        org.weblate.service: "${APPLICATION_NAME}-postgresql"
    spec:
      ports:
        - name: 5432-tcp
          protocol: TCP
          port: 5432
          targetPort: 5432
      selector:
        org.weblate.service: "${APPLICATION_NAME}-postgresql"
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-cache"
      labels:
        org.weblate.service: "${APPLICATION_NAME}-cache"
    spec:
      ports:
        - name: 6379-tcp
          protocol: TCP
          port: 6379
          targetPort: 6379
      selector:
        org.weblate.service: "${APPLICATION_NAME}-cache"
  - kind: Route
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      host: "${WEBLATE_SITE_DOMAIN}"
      to:
        kind: Service
        name: "${APPLICATION_NAME}"
        weight: 100
      port:
        targetPort: 8080
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Allow
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-postgresql-data"
      labels:
        app: "${APPLICATION_NAME}"
    allowVolumeExpansion: true
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "${DATABASE_VOLUME_SIZE}"
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-redis-data"
      labels:
        app: "${APPLICATION_NAME}"
    allowVolumeExpansion: true
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "${CACHE_VOLUME_SIZE}"
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-weblate-data"
      labels:
        app: "${APPLICATION_NAME}"
    allowVolumeExpansion: true
    spec:
      accessModes:
        - "${WEBLATE_VOLUME_TYPE}"
      resources:
        requests:
          storage: "${WEBLATE_VOLUME_SIZE}"
