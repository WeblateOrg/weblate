[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=69.0.0",
  "translate-toolkit"
]

[dependency-groups]
dev = [
  {include-group = "docs"},
  {include-group = "lint"},
  {include-group = "scripts"},
  {include-group = "test"},
  {include-group = "types"}
]
docs = [
  "furo==2024.8.6",
  "jinja2>=3.1.4",
  "matplotlib==3.10.0",
  "Pillow>=10.3.0,<12",
  "Pygments>=2.17.0,<3.0",
  "sphinx-copybutton==0.5.2",
  "sphinx-jsonschema==1.19.1",
  "sphinx-reredirects==0.1.5",
  "Sphinx==8.1.3",
  "sphinxcontrib-httpdomain==1.8.1",
  "sphinxext-opengraph==0.9.1"
]
lint = [
  {include-group = "pre-commit"},
  {include-group = "pylint"}
]
pre-commit = [
  "pre-commit==4.1.0"
]
pylint = [
  "pylint==3.3.4"
]
scripts = [
  "django-debug-toolbar==5.0.1",
  "PyICU==2.14",
  "reuse==5.0.2",
  "scour==0.38.2",
  "tinyunicodeblock==1.3"
]
test = [
  "coverage==7.6.12",
  "pytest-cov==6.0.0",
  "pytest-django==4.10.0",
  "pytest-profiling==1.8.1",
  "pytest==8.3.4",
  "responses==0.25.6",
  "respx==0.22.0",
  "selenium==4.28.1"
]
types = [
  "boto3-stubs==1.36.21",
  "celery-types==0.22.0",
  "django-stubs-ext==5.1.3",
  "django-stubs==5.1.3",
  "djangorestframework-stubs==3.15.2",
  "mypy==1.15.0",
  "PyGObject-stubs==2.12.0",
  "types-dateparser==1.2.0.20250208",
  "types-docutils==0.21.0.20241128",
  "types-jsonschema==4.23.0.20241208",
  "types-lxml==2024.12.13",
  "types-openpyxl==3.1.5.20241225",
  "types-Pillow==10.2.0.20240822",
  "types-python-dateutil==2.9.0.20241206",
  "types-regex==2024.11.6.20241221",
  "types-requests==2.32.0.20241016"
]

[project]
authors = [
  {email = "michal@weblate.org", name = "Michal Čihař"}
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "Framework :: Django",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python",
  "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Software Development :: Internationalization",
  "Topic :: Software Development :: Localization"
]
dependencies = [
  "aeidon>=1.14.1,<1.16",
  "ahocorasick-rs>=0.20.0,<0.23.0",
  "altcha>=0.1.7,<2.0",
  "borgbackup>=1.2.5,<1.5",
  "celery[redis]>=5.4.0,<5.5",
  "certifi>=2024.8.30",
  "charset-normalizer>=2.0.12,<4.0",
  "crispy-bootstrap3==2024.1",
  "cryptography>=42.0.4",
  "cssselect>=1.2,<1.3",
  "cyrtranslit>=1.1.0,<1.2.0",
  "Cython>=3.0.0,<3.1",
  "dateparser>=1.2.0,<1.3.0",
  "diff-match-patch==20241021",
  "django-appconf>=1.0.3,<1.2",
  "django-celery-beat>=2.7.0,<2.8",
  "django-compressor>=4.5.1,<5",
  "django-cors-headers>=4.6.0,<4.8",
  "django-crispy-forms>=2.3,<2.4",
  "django-filter>=24.3,<25.2",
  "django-otp-webauthn>=0.4.0,<0.5",
  "django-otp>=1.5.4,<2.0",
  "django-redis>=5.4.0,<6.0",
  "Django[argon2]>=5.1.5,<5.2",
  "djangorestframework-csv>=3.0.2,<3.1",
  "djangorestframework>=3.15.2,<3.16",
  "docutils>=0.21.2,<0.22",
  "drf-spectacular[sidecar]>=0.28.0,<0.29",
  "drf-standardized-errors[openapi]>=0.14.1,<0.15",
  "filelock<4,>=3.16.1",
  "fluent.syntax>=0.18.1,<0.20",
  "GitPython>=3.1.0,<3.2",
  "hiredis>=2.2.1,<3.2",
  "html2text>=2024.2.25,<2024.2.27",
  "iniparse==0.5",
  "jsonschema>=4.23.0,<5",
  "lxml>=5.2.0,<5.4",
  "mistletoe>=1.4.0,<1.5",
  "nh3>=0.2.14,<0.3",
  "openpyxl>=3.1.0,<3.2",
  "packaging>=23,<25",
  "phply>=1.2.6,<1.3",
  "Pillow>=10.3.0,<12",
  "pycairo>=1.20.0",
  "Pygments>=2.17.0,<3.0",
  "PyGObject>=3.40.1,<3.51.0",
  "pyicumessageformat>=1.0.0,<1.1",
  "pyparsing>=3.1.1,<3.3",
  "python-dateutil>=2.8.2",
  "python-redis-lock[django]>=4,<4.1",
  "qrcode>=7.4.1,<8.1",
  "rapidfuzz>=3.8.0,<3.13",
  "redis>=5.0.2,<5.3.0",
  "requests>=2.32.2,<2.33",
  "ruamel.yaml>=0.17.2,<0.19.0",
  "sentry-sdk>=2.15.0,<3.0",
  "siphashc>=2.1,<3.0",
  "social-auth-app-django>=5.4.2,<6.0.0",
  "social-auth-core>=4.5.4,<5.0.0",
  "tesserocr>=2.6.1,<2.9.0",
  "translate-toolkit>=3.14.4,<3.15",
  "translation-finder>=2.18,<3.0",
  "unidecode>=1.3.8,<1.4",
  "user-agents>=2.0,<2.3",
  "weblate-language-data>=2025.2",
  "weblate-schemas==2024.2"
]
description = "A web-based continuous localization system with tight version control integration"
keywords = [
  "gettext",
  "git",
  "i18n",
  "l10n",
  "mercurial",
  "translate"
]
license = {text = "GPLv3+"}
name = "weblate"
requires-python = ">=3.11"
version = "5.10.1"

[project.optional-dependencies]
alibaba = [
  "aliyun-python-sdk-alimt>=3.2.0,<4.0.0",
  "aliyun-python-sdk-core>=2.16.0,<3.0.0"
]
all = [
  "weblate[alibaba,amazon,antispam,gerrit,gelf,google,ldap,mercurial,openai,postgres,saml,zxcvbn]"
]
amazon = [
  "boto3>=1.28.62,<2.0"
]
antispam = [
  "python-akismet>=0.4.2,<0.5"
]
gelf = [
  "logging-gelf>=0.0.32,<0.1"
]
gerrit = [
  "git-review>=2.4.0,<2.5.0"
]
google = [
  "google-cloud-storage>=2.18.2,<3.1",
  "google-cloud-translate>=3.13.0,<4.0"
]
ldap = [
  "django-auth-ldap>=4.6.0,<6.0.0"
]
mercurial = [
  "mercurial>=6.8.0,<7.0"
]
mysql = [
  "mysqlclient>=2.1.1,<3"
]
openai = [
  "openai>=1.56.1,<2.0"
]
postgres = [
  "psycopg[binary]>=3.1.8,<4"
]
saml = [
  "python3-saml>=1.2.1"
]
saml2idp = [
  "djangosaml2idp==0.7.2"
]
wlhosted = [
  "wlhosted"
]
wllegal = [
  "wllegal>=2024.6"
]
wsgi = [
  "gunicorn==23.0.0"
]
zxcvbn = [
  "django-zxcvbn-password==2.1.1"
]

[project.readme]
content-type = "text/x-rst"
file = "README.rst"

[project.scripts]
weblate = "weblate.runner:main"
weblate-generate-secret-key = "weblate.utils.generate_secret_key:main"

[project.urls]
Documentation = "https://docs.weblate.org/"
Download = "https://weblate.org/download/"
Funding = "https://weblate.org/donate/"
Homepage = "https://weblate.org/"
"Issue Tracker" = "https://github.com/WeblateOrg/weblate/issues"
"Release Notes" = "https://docs.weblate.org/en/latest/changes.html"
"Source Code" = "https://github.com/WeblateOrg/weblate"
X = "https://x.com/WeblateOrg"

[tool.check-manifest]
ignore = [
  "*.json",
  "*.toml",
  "*.yaml",
  "*.yml",
  ".editorconfig",
  ".gitmodules",
  ".gitmodules",
  ".imgbotconfig",
  ".reuse/dep5",
  ".stylelintrc",
  ".weblate",
  ".well-known/*",
  ".yamllint.yml",
  "ci/*",
  "client/*",
  "client/*/*",
  "dev-docker/*",
  "dev-docker/*/*",
  "docs/*",
  "docs/*/*",
  "docs/*/*/*",
  "docs/*/*/*/*",
  "LICENSES/*",
  "rundev.sh",
  "scripts/*",
  "scripts/*/*",
  "scripts/*/*/*",
  "scripts/*/*/*/*"
]
ignore-bad-ideas = [
  "weblate/trans/tests/data/cs.mo"  # Test data
]

[tool.check-wheel-contents]
ignore = [
  "W002",  # Triggered by __init__.py or .license files
  "W004"  # Django migrations fail here
]

[tool.codespell]
builtin = "clear,rare,informal,usage"
count = true
dictionary = "scripts/codespell.txt,-"
# Vai is a language name
ignore-words-list = "assertIn,Vai,master"
skip = '*.po,*.pot,*.json,*.tmx,*.tbx,*.csv,*/vendor/*,weblate/trans/specialchars.py,weblate/trans/tests/data/known_hosts,docs/changes/contributors/*.rst'

[tool.coverage.paths]
source = [
  "."
]

[tool.coverage.report]
exclude_also = [
  "@(abc\\.)?abstractmethod",
  # Don't complain about missing debug-only code:
  "def __repr__",
  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",
  "if self\\.debug",
  # Type checking
  "if TYPE_CHECKING:",
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError"
]

[tool.coverage.run]
branch = true
concurrency = ["multiprocessing", "thread"]
omit = [
  ".venv*/*",
  "weblate/settings.py",
  "weblate/settings_*.py"
]

[tool.django-stubs]
django_settings_module = "weblate.settings_example"
strict_settings = false

[tool.djlint]
blank_line_after_tag = "load,extends,endblock"
# - reconsider T032 and H014 once formatter is in use
# T003 - Endblock should have name.
# T002 - Double quotes should be used in tags. (makes using tags in attributes hard)
# H013 - Img tag should have an alt attribute.
# H006 - Img tag should have height and width attributes.
# H021 - Inline styles should be avoided.
# H031 - Consider adding meta keywords.
ignore = "T003,H014,T032,T002,H013,H006,H021,H031"
indent = 2
max_attribute_length = 80
max_blank_lines = 2
preserve_blank_lines = true
profile = "django"

[tool.djlint.per-file-ignores]
# Mail templates need inline CSS and do not utilize description
"weblate/templates/mail/base.html" = "H030"
# Test file
"weblate/trans/tests/data/cs.html" = "H005,H007,H016,H030"

[tool.mypy]
check_untyped_defs = true
plugins = [
  "mypy_django_plugin.main",
  "mypy_drf_plugin.main"
]

[[tool.mypy.overrides]]
disallow_untyped_defs = true
ignore_missing_imports = true
module = [
  "akismet.*",
  "aliyunsdkalimt.*",
  "aliyunsdkcore.*",
  "appconf.*",
  "borg.*",
  "crispy_forms.*",
  "cyrtranslit.*",
  "debug_toolbar.*",
  "diff_match_patch.*",
  "django.db.backends.postgresql.psycopg_any",
  "django_auth_ldap.*",
  "django_celery_beat.*",
  "django_filters.*",
  "django_otp.*",
  "django_otp_webauthn.*",
  "django_redis.*",
  "djangosaml2idp.*",
  "gi.*",
  "google.oauth2.*",
  "ldap.*",
  "mistletoe.*",
  "pygments.*",
  "pyicumessageformat.*",
  "qrcode.*",
  "redis_lock.*",
  "rest_framework_csv.*",
  "rollbar.*",
  "ruamel.*",
  "saml2.*",
  "simple_sso.*",
  "social_core.*",
  "social_django.*",
  "tesserocr.*",
  "translate.*",
  "translation_finder.*",
  "user_agents.*",
  "weblate_language_data.*",
  "weblate_schemas.*",
  "wlhosted.*",
  "wllegal.*"
]

[tool.pydistcheck]
max_allowed_files = 2500
max_allowed_size_compressed = '100M'
max_allowed_size_uncompressed = '300M'

[tool.pylint.main]
disable = [
  "C",
  "c-extension-no-member",
  "I",
  "import-error",
  "invalid-str-returned",
  "no-member",
  "no-name-in-module",
  "not-a-mapping",
  "not-an-iterable",
  "not-callable",
  "R",
  "raising-bad-type",
  "unsubscriptable-object",
  "unsupported-binary-operation",
  "unsupported-membership-test",
  "W"
]
extension-pkg-whitelist = ["siphashc"]
ignore = [
  ".git",
  ".venv",
  "build",
  "migrations",
  "repos",
  "settings.py",
  "settings_test.py",
  "test-repos"
]

[tool.pytest.ini_options]
addopts = "--reuse-db --cov=weblate --cov-report= --durations=20 --durations-min=2 --ignore=data --ignore=data-test --ignore=dev-docker --ignore=scripts"
DJANGO_SETTINGS_MODULE = "weblate.settings_test"
FAIL_INVALID_TEMPLATE_VARS = true
python_files = ["test_*.py", "tests.py"]

[tool.ruff.lint]
extend-safe-fixes = [
  "ANN",
  "D",
  "FA102",
  "FLY",
  "SIM",
  "TCH",
  "UP"
]
# CONFIG - intentional configuration
# TODO - needs decision whether intention, add noqa tags or fix
# WONTFIX - not fixable in current codebase, might be better to go for noqa
ignore = [
  "A005",  # WONTFIX: Module is shadowing a Python builtin module
  "ANN001",  # TODO: Missing type annotation for function argument
  "ANN002",  # TODO: Missing type annotation for `*args`
  "ANN003",  # TODO: Missing type annotation for `**kwargs`
  "ANN201",  # TODO: Missing return type annotation for public function
  "ANN202",  # TODO:  Missing return type annotation for private function
  "ANN204",  # TODO: Missing return type annotation for special method
  "ANN205",  # TODO: Missing return type annotation for staticmethod
  "ANN206",  # TODO: Missing return type annotation for classmethod
  "ARG001",  # TODO: Unused function argument (mostly for API compatibility)
  "ARG002",  # TODO: Unused method argument (mostly for API compatibility)
  "BLE001",  # WONTFIX: Do not catch blind exception: `Exception`, third-party modules do not have defined exceptions
  "COM",  # CONFIG: No trailing commas
  "D100",  # TODO: Missing docstring in public module
  "D101",  # TODO: Missing docstring in public class
  "D102",  # TODO: Missing docstring in public method
  "D103",  # TODO: Missing docstring in public function
  "D104",  # TODO: Missing docstring in public package
  "D105",  # TODO: Missing docstring in magic method
  "D106",  # TODO: Missing docstring in public nested class
  "D107",  # TODO: Missing docstring in `__init__`
  "D203",  # CONFIG: incompatible with D211
  "D206",  # CONFIG: formatter
  "D212",  # CONFIG: incompatible with D213
  "DOC",  # TODO: Ignore all pydoclint rules for now
  "E203",  # CONFIG: formatter
  "E501",  # WONTFIX: we accept long strings (rest is formatted by black)
  "FBT",  # TODO: Boolean in function definition
  "FIX002",  # CONFIG: we use TODO
  "FURB101",  # TODO:  `open` and `read` should be replaced by `Path(hostsfile).read_text()`
  "FURB103",  # TODO: `open` and `write` should be replaced by `Path(name).write_text(content)`
  "PERF203",  # WONTFIX: This rule is only enforced for Python versions prior to 3.11
  "PLC0415",  # TODO: `import` should be at the top-level of a file
  "PLR2004",  # TODO: Magic value used in comparison, consider replacing 201 with a constant variable
  "PLR6301",  # TODO: Method could be a function, class method, or static method
  "PLW1514",  # TODO: `open` in text mode without explicit `encoding` argument
  "PLW2901",  # TODO: overwriting variables inside loop
  "PT",  # CONFIG: Not using pytest
  "PTH",  # TODO: Not using pathlib
  "RUF001",  # WONTFIX: String contains ambiguous unicode character, we are using Unicode
  "RUF012",  # TODO: Mutable class attributes should be annotated with `typing.ClassVar`
  "S404",  # CONFIG: `subprocess` module is possibly insecure
  "S603",  # CONFIG: `subprocess` call: check for execution of untrusted input
  "S607",  # CONFIG: executing system installed tools
  "TD002",  # CONFIG: no detailed TODO documentation is required
  "TD003",  # CONFIG: no detailed TODO documentation is required
  "TRY003",  # WONTFIX: Avoid specifying long messages outside the exception class
  'ISC001',  # CONFIG: formatter
  'Q000',  # CONFIG: formatter
  'Q001',  # CONFIG: formatter
  'Q002',  # CONFIG: formatter
  'Q003',  # CONFIG: formatter
  'W191'  # CONFIG: formatter
]
preview = true
select = ["ALL"]

[tool.ruff.lint.flake8-copyright]
min-file-size = 2
# Copyright without a year, see https://github.com/astral-sh/ruff/issues/10062
notice-rgx = "(?i)Copyright\\s+©\\s+"

[tool.ruff.lint.mccabe]
max-complexity = 16  # TODO: should be lower

[tool.ruff.lint.per-file-ignores]
"docs/_ext/djangodocs.py" = ["INP001"]
"docs/conf.py" = ["ERA001", "INP001"]
"scripts/*" = ["T201", "T203"]
"weblate/*/tests**.py" = ["S105", "S106"]
"weblate/auth/migrations/0003_fixup_teams.py" = ["T201"]
"weblate/examples/*.py" = ["INP001"]
"weblate/settings_*.py" = ["F405"]
"weblate/settings_example.py" = ["ERA001"]
"weblate/utils/generate_secret_key.py" = ["T201"]

[tool.ruff.lint.pylint]
# TODO: all these should be lower (or use defaults)
max-args = 12
max-bool-expr = 8
max-branches = 36
max-locals = 23
max-nested-blocks = 9
max-positional-args = 8
max-public-methods = 180
max-returns = 21
max-statements = 100

[tool.setuptools]
include-package-data = true
license-files = []
zip-safe = false

[tool.setuptools.packages]
find = {namespaces = false}

[tool.tomlsort]
ignore_case = true
sort_inline_arrays = true
sort_inline_tables = true
sort_table_keys = true
spaces_before_inline_comment = 2
